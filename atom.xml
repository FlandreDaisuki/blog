<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Be a dreamer. Keep sleeping.</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://flandredaisuki.github.io/blog/"/>
  <updated>2018-03-31T18:57:02.985Z</updated>
  <id>https://flandredaisuki.github.io/blog/</id>
  
  <author>
    <name>Chun-Hao Lien</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 一月番短評</title>
    <link href="https://flandredaisuki.github.io/blog/2018/03/30/2018-%E4%B8%80%E6%9C%88%E7%95%AA%E7%9F%AD%E8%A9%95/"/>
    <id>https://flandredaisuki.github.io/blog/2018/03/30/2018-一月番短評/</id>
    <published>2018-03-29T19:17:00.000Z</published>
    <updated>2018-03-31T18:57:02.985Z</updated>
    
    <content type="html"><![CDATA[<p>整體來說真的是佳作偏多的一季，但神仙打架吹到最後，真的剩沒幾個了ww</p><p>以下列表將收錄一月及與一月番同時完結的舊番，評論會有部份劇透，請自行斟酌。排序為評價降冪，同評價不分順序。</p><div class="toc"><!-- toc --><ul><li><a href="#yao-yi-lu-ying">搖曳露營</a></li><li><a href="#bi-yu-zhou-huan-yuan-de-di-fang">比宇宙還遠的地方</a></li><li><a href="#mo-fa-shi-de-xin-niang">魔法使的新娘</a></li><li><a href="#san-yue-de-shi-zi-di-er-ji">三月的獅子 第二季</a></li><li><a href="#ai-chi-la-mian-de-xiao-quan-tong-xue">愛吃拉麵的小泉同學</a></li><li><a href="#bo-duo-tun-gu-la-mian-tuan">博多豚骨拉麵團</a></li><li><a href="#shan-chang-zhuo-nong-ren-de-gao-mu-tong-xue">擅長捉弄人的高木同學</a></li><li><a href="#ke-ke">刻刻</a></li><li><a href="#jiu-gui-mei-zi">酒鬼妹子</a></li><li><a href="#long-wang-de-gong-zuo">龍王的工作</a></li><li><a href="#bao-gan-gong-cheng-shi-de-yi-shi-jie-kuang-xiang-qu">爆肝工程師的異世界狂想曲</a></li><li><a href="#yi-teng-run-er-jing-xuan-ji">伊藤潤二驚選集</a></li><li><a href="#pop-team-epic">POP TEAM EPIC</a></li></ul><!-- tocstop --></div><h2><span id="yao-yi-lu-ying">搖曳露營</span></h2><p>ゆるキャン△</p><p>本季有看的動畫中，畫風最穩，質量最高的一部。ED 非常好聽，看妹子吃吃喝喝露營真的超棒的！！</p><p>雖說日常番，芝麻凜從單人露營到慢慢轉變最後接受露營社邀約的心境轉變是描寫的蠻不錯的，但其實不是重點，重點是犬妹的虎牙跟關西腔啊！！！</p><p>評價：★★★★★</p><img src="/blog/2018/03/30/2018-一月番短評/露營.jpg"><h2><span id="bi-yu-zhou-huan-yuan-de-di-fang">比宇宙還遠的地方</span></h2><p>宇宙よりも遠い場所</p><p>本季非日常向的霸權，沒有之一，這季我覺得前三好看的番，四個女高中生的青春故事。前幾集感覺十分的銀魂兩個女主角就是阿銀跟神樂，中途加入井口裕香配的日向就是個吐槽役。</p><p>第五集劇情急轉直下，慢慢帶出四個妹子和他們青春期的煩惱，以及在這趟南極之旅成為交心的朋友。尤其第 11 集，報瀨幫日向回嗆的那段簡直高潮！最後一集只用了十幾秒就收了我以為第五集讓劇情急轉直下的這條線，而且收的真漂亮！看來《LoveLive SunShine》做成這樣真的不是花田十輝的錯w</p><p>看到下面那一幕我還以為是千歌跟梨子呢！ 😆</p><p>評價：★★★★★</p><img src="/blog/2018/03/30/2018-一月番短評/南極.jpg"><h2><span id="mo-fa-shi-de-xin-niang">魔法使的新娘</span></h2><p>魔法使いの嫁</p><p>這是 2017 的十月番，前半段描寫智世到魔法世界的不適應和為什麼總是對生命這麼消極；後半段在描寫艾利亞斯其實比智世想像的還幼稚，而智世在接受魔法世界的幫助變得對生命更積極。</p><p>是好好說故事的類型，劇情偏少女漫畫，有大量智世的內心戲。畫風非常棒，音樂很好聽，偶爾的 Q 版過場也非常討喜。</p><p>評價：★★★★★</p><img src="/blog/2018/03/30/2018-一月番短評/新娘.jpg"><h2><span id="san-yue-de-shi-zi-di-er-ji">三月的獅子 第二季</span></h2><p>3月のライオン 第2シリーズ</p><p>一樣是 17 年的十月番，不過劇情是緊接第一季的，為 23 話至 44 話。這部實在沒什麼好挑剔的，有熱血對弈、有青春戀愛、有同儕友誼、有家庭溫暖，談教育、談霸凌、談職涯、談人生，整部動畫圍繞在主角桐山零生活的各種細節，非常好看！非常好看！非常好看！</p><p>尤其是第二季前半段的霸凌篇，非常熱血，看勇敢的雛在霸凌的環境中殺出一條路，非常過癮；再來就是不人氣棋士間的對戰了，新房對老頭的內心煎熬，以非常特別的風格描繪，讓身為觀眾的我都可以透過銀幕感受到老頭的痛苦跟決心。</p><p>類似的作品如《昭和元祿落語心中》，一樣由單一主角為中心，以職業和所見的人事為輔，類似自傳風格的動畫，真的超級喜歡！</p><p>評價：★★★★★</p><img src="/blog/2018/03/30/2018-一月番短評/獅子.jpg"><h2><span id="ai-chi-la-mian-de-xiao-quan-tong-xue">愛吃拉麵的小泉同學</span></h2><p>ラーメン大好き小泉さん</p><p>害我現在經過拉麵店都會特別看一下，非常成功的拉麵店廣告。拉麵的作畫特別精美，看點和「露營」一樣是看小泉同學與他快樂的夥伴們(?)吃拉麵的日常。</p><p>特別提一下，這部的佐倉綾音不是經典的聲音，完全就是個變態，超煩燥www</p><p>評價：★★★★☆</p><img src="/blog/2018/03/30/2018-一月番短評/小泉.jpg"><h2><span id="bo-duo-tun-gu-la-mian-tuan">博多豚骨拉麵團</span></h2><p>博多豚骨ラーメンズ</p><p>超好看的殺手群像劇，比起《無頭騎士異聞錄》，這部的節奏更快，事件更短，大概兩到三集就是一個完整的小故事了。OP 因為是岸田教團很推但更厲害的是 ED，是風格很《魯邦三世》的純曲子，也算是劇中各種事件的主題曲。</p><p>不過最後一個小故事有點老套有點慢，降了一點分數，不過瑕不掩瑜，蘑菇頭那段太讚了！最後，林林超可愛的！！</p><p>評價：★★★★☆</p><img src="/blog/2018/03/30/2018-一月番短評/林林.jpg"><h2><span id="shan-chang-zhuo-nong-ren-de-gao-mu-tong-xue">擅長捉弄人的高木同學</span></h2><p>からかい上手の高木さん</p><p>全程白紙。高木幾乎都是丟直球啊，為什麼西片你就是接不到啊！單元劇日常，還不錯看。</p><p>特別要說的是 ED 是挑經典的老歌由高木的聲優來唱，我還蠻喜歡這種「声優カバー」的曲子的。</p><p>評價：★★★★☆</p><img src="/blog/2018/03/30/2018-一月番短評/高木.jpg"><h2><span id="ke-ke">刻刻</span></h2><p>刻刻</p><p>已開播前三集的表現可以說是大黑馬，別緻的世界觀，止界中多方人馬的衝突，OP 非常帶感，ED 很好聽(也很好看)，爺爺超帥，感覺是認真講故事的劇情向奇幻動畫。</p><p>但是，就在最後三話，劇情以一個拋物線的方式墜落。大家不是變成神之忍離就是水母被驅散，就是佐河可以像《龍珠》的魔人普烏一樣打不死、重生、再進化；佐河家跟佑河家的關係完全沒有解釋；超能力呢？為什麼有的人會有的人不會？樹里的驅散掌之前可是打到成年人流鼻血的啊，後面大家身體都這麼好，打到後都跟沒事一樣？最後一話石頭的來歷和女主角的救贖以一個近乎扯淡的方式結尾。</p><p>嗯… 大概是被腰斬了吧…</p><p>評價：★★★☆☆</p><img src="/blog/2018/03/30/2018-一月番短評/刻刻.jpg"><h2><span id="jiu-gui-mei-zi">酒鬼妹子</span></h2><p>たくのみ。</p><p>酒品廣告。劇情上沒有像《露營》這麼出色卻也沒有特別值得噴的部份，下酒菜畫的也不錯，但偶爾在作畫上能看到動畫製作組好像有點窮。每集只有十二分鐘但小單元劇都蠻有趣的，看直姊各種賣萌顏藝卻熟知各種酒類知識，大概算是一種反差萌吧w</p><p>整體來說算是輕鬆的酒品廣告加知識科普番。</p><p>評價：★★★☆☆</p><img src="/blog/2018/03/30/2018-一月番短評/宅飲.jpg"><h2><span id="long-wang-de-gong-zuo">龍王的工作</span></h2><p>りゅうおうのおしごと!</p><p>除了愛的作畫很可愛之外，沒什麼亮點的動畫。原本是聽說連續兩年得獎的小說，應該不會太差，然而動畫只想畫蘿莉，跟隔壁《三月的獅子》比起來，將棋的描寫真的是可有可無。</p><p>大概只有桂香姊那一話有好好講故事，其他都看八一跟愛開掛，小學生打贏現任女流帝位頭銜的棋士啦，旁白一句話主角就連贏三盤啦之類的… 作者你說什麼就是什麼吧…</p><p>評價：★★☆☆☆</p><img src="/blog/2018/03/30/2018-一月番短評/桂香.jpg"><h2><span id="bao-gan-gong-cheng-shi-de-yi-shi-jie-kuang-xiang-qu">爆肝工程師的異世界狂想曲</span></h2><p>デスマーチからはじまる異世界狂想曲</p><p>開頭真的不錯，雖然設定上又是個開掛男主角，但大部分的描述卻是擺在異世界的食物，第一人稱評價食物，感覺像在看《孤獨的美食家》或《異世界食堂》。</p><p>然而就只有開頭還行，後面每一集就多收一兩個妹子進隊伍，甚至到第九集都還在第一個村莊，到底哪個遊戲會在新手村放這麼多夥伴加入隊伍的副本啦！！</p><p>惡意賣蘿、賣奶、賣亞里紗發情(一個戲份特別多卻完全不影響劇情的妹子)等等防不勝防，結尾更是語焉不詳zzz</p><p>評價：★★☆☆☆</p><img src="/blog/2018/03/30/2018-一月番短評/爆肝.jpg"><h2><span id="yi-teng-run-er-jing-xuan-ji">伊藤潤二驚選集</span></h2><p>伊藤潤二『コレクション』</p><p>伊藤潤二絕對是我喜歡的漫畫家的前幾名，然而這部動畫無時不刻都透露出製作組沒有錢的氣息，幻燈片般的 FPS、過亮的色調，讓一些應該要後勁很強的短篇完全變成搞笑片，有種「我當初看這篇的時候明明還蠻毛的啊，但現在怎麼這麼智障」的感覺。</p><p>不過選篇倒是都選的蠻經典的，『長夢』、富江的『畫家』、『十字路口的美少年』等，蠻推薦找原作來看的，動畫實在不推薦。</p><p>評價：★☆☆☆☆</p><img src="/blog/2018/03/30/2018-一月番短評/富江.jpg"><h2><span id="pop-team-epic">POP TEAM EPIC</span></h2><p>ポプテピピック</p><p>完全不是動畫。支離破碎的單元劇、24 分鐘實際是 9 分鐘動畫內容加片頭片尾曲換個聲優重複兩次、AC 部令人「驚豔」的畫風，確實在 SNS 引發不少話題，連聲優都稱本作「糞アニメ」。</p><p>這大概也是製作組的目的，但過了這季這些東西真的沒什麼值得一提的地方。如果有的話，大概是以 meme 貼圖的方式被流傳下來吧… 寧願去看京阿尼的《日常》。</p><p>評價：★☆☆☆☆</p><img src="/blog/2018/03/30/2018-一月番短評/糞作.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整體來說真的是佳作偏多的一季，但神仙打架吹到最後，真的剩沒幾個了ww&lt;/p&gt;
&lt;p&gt;以下列表將收錄一月及與一月番同時完結的舊番，評論會有部份劇透，請自行斟酌。排序為評價降冪，同評價不分順序。&lt;/p&gt;
&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="ACG" scheme="https://flandredaisuki.github.io/blog/tags/ACG/"/>
    
  </entry>
  
  <entry>
    <title>在 JavaScript 中使用 GOTO 語法!?</title>
    <link href="https://flandredaisuki.github.io/blog/2018/03/27/%E5%9C%A8-JavaScript-%E4%B8%AD%E4%BD%BF%E7%94%A8-GOTO-%E8%AA%9E%E6%B3%95/"/>
    <id>https://flandredaisuki.github.io/blog/2018/03/27/在-JavaScript-中使用-GOTO-語法/</id>
    <published>2018-03-27T07:10:39.000Z</published>
    <updated>2018-03-27T08:49:27.310Z</updated>
    
    <content type="html"><![CDATA[<p>標題是在<ruby>致<rp>(</rp><rt>ㄊㄨˋ</rt><rp>)</rp>敬<rp></rp><rt>ㄘㄠˊ</rt><rp>)</rp></ruby>這篇文章：<a href="https://medium.com/@p5d12000/%E5%9C%A8-javascript-%E4%B8%AD%E4%BD%BF%E7%94%A8-goto-%E8%AA%9E%E6%B3%95-97f8756197df" target="_blank" rel="noopener">在 JavaScript 中使用 GOTO 語法</a>，如果你還沒看過可以先看看。</p><h2><span id="qian-yan">前言</span></h2><p>看起來是蠻搞笑的沒錯，但有沒有很難迴避的狀況呢？看看下面這個例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = fetchSync(url); <span class="comment">// 假設拿到是 response 物件而不是 Promise</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前處理</span></span><br><span class="line"><span class="keyword">if</span>(response) &#123;</span><br><span class="line">  <span class="keyword">const</span> html = response.getHTMLObject();</span><br><span class="line">  <span class="keyword">if</span>(html.hasTargetObject()) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = html.getTargetObject();</span><br><span class="line">    <span class="keyword">if</span>(target.value.isValid()) &#123;</span><br><span class="line">      result = target.value; <span class="comment">// 拿到了，想跳到後處理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.updateInnerState(); <span class="comment">// 改變內部狀態機讓後面可以做</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(target.hasData()) &#123;</span><br><span class="line">      result = target.getData().toResult(); <span class="comment">// 拿到了，想跳到後處理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.updateInnerState(); <span class="comment">// 改變內部狀態機讓後面可以做</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(target.getId()) &#123;</span><br><span class="line">      result = target.getId().toResult(); <span class="comment">// 拿到了，想跳到後處理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  html.resolveResult(); <span class="comment">// 確定會搞出 result</span></span><br><span class="line">  result = html.getResult(); <span class="comment">// 拿到了，想跳到... 最後了不用跳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 後處理</span></span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">  <span class="comment">// do something awesome works...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面這個例子在前處理用了三層<code>if</code>和三個平行的<code>if</code>，然後任何一個地方失敗就希望跳出去給後處理，但是又不希望 throw Exception，這要怎麼辦呢？</p><h2><span id="chong-dian">重點</span></h2><p>其實是因為最近在幫學長 debug 的時候看到一個很漂亮的寫法可以解決這件事，如下：<br><figure class="highlight js"><figcaption><span>do...while(0)</span><a href="https://github.com/FlandreDaisuki/NflxMultiSubs/blob/master/src/nflxmultisubs.js#L552-L653" target="_blank" rel="noopener">NflxMultiSubs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前處理</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(currentVideoElem &amp;&amp; <span class="keyword">this</span>.videoElem.src !== currentVideoElem.src) &#123;</span><br><span class="line">    <span class="comment">// 跟 video element 相關問題錯誤</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 略 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.subtitleWrapperElem || !<span class="keyword">this</span>.subtitleWrapperElem.parentNode) &#123;</span><br><span class="line">    <span class="keyword">const</span> playerContainerElem = <span class="built_in">document</span>.querySelector(<span class="string">'.nf-player-container'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!playerContainerElem) <span class="keyword">break</span>; <span class="comment">// 這邊在雙層 if 內，也可以做到直接跳到後處理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 略 */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 略 */</span></span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 後處理</span></span><br><span class="line"><span class="keyword">this</span>.isRunning &amp;&amp; <span class="built_in">window</span>.requestAnimationFrame(<span class="keyword">this</span>.loop.bind(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure></p><p>看大神們的 code 總是能發現一些奇技淫巧，真棒！ ♥️</p><h2><span id="bu-chong">補充</span></h2><p>仔細查才發現這是原本用在 C 和 C++ 的 macro 會用到的技巧，不過我對這方面不熟，還是交給專業的來解釋吧～<br><a href="https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for" target="_blank" rel="noopener">https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;標題是在&lt;ruby&gt;致&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ㄊㄨˋ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;敬&lt;rp&gt;&lt;/rp&gt;&lt;rt&gt;ㄘㄠˊ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;這篇文章：&lt;a href=&quot;https://medium.com/@p5d12000/%E5%9C%A8-ja
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://flandredaisuki.github.io/blog/tags/JavaScript/"/>
    
      <category term="奇技淫巧" scheme="https://flandredaisuki.github.io/blog/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 函式參數的賦值解構</title>
    <link href="https://flandredaisuki.github.io/blog/2018/03/15/JavaScript-%E5%87%BD%E5%BC%8F%E5%8F%83%E6%95%B8%E7%9A%84%E8%B3%A6%E5%80%BC%E8%A7%A3%E6%A7%8B/"/>
    <id>https://flandredaisuki.github.io/blog/2018/03/15/JavaScript-函式參數的賦值解構/</id>
    <published>2018-03-14T16:35:27.000Z</published>
    <updated>2018-03-27T08:20:45.009Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="qian-yan">前言</span></h2><p>ES6 可以在函式宣告時將 <code>Object</code>, <code>Array</code> 型態的參數可以直接解構成區域變數，下面舉個例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 傳統參數傳值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exp</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base ** exponent;</span><br><span class="line">&#125;</span><br><span class="line">exp(<span class="number">4</span>, <span class="number">3</span>) <span class="comment">//=&gt; 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 參數賦值解構</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exp</span>(<span class="params">&#123; base, exponent &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base ** exponent;</span><br><span class="line">&#125;</span><br><span class="line">exp(&#123; <span class="attr">base</span>: <span class="number">4</span>, <span class="attr">exponent</span>: <span class="number">3</span> &#125;) <span class="comment">//=&gt; 64</span></span><br></pre></td></tr></table></figure><p>看起來好像並沒有比較簡潔，但其實在設計類似 <code>options</code> 參數時就會非常方便：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 傳統參數傳值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toPerson</span>(<span class="params">name, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        job: options.job,</span><br><span class="line">        age: options.age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">toPerson(<span class="string">'Alice'</span>, &#123; <span class="attr">job</span>: <span class="string">'student'</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;); <span class="comment">//=&gt; &#123; name: "Alice", job: "student", age: 16 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 參數賦值解構</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toPersonV2</span>(<span class="params">name, &#123; job, age &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        job,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">toPersonV2(<span class="string">'Alice'</span>, &#123; <span class="attr">job</span>: <span class="string">'student'</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;); <span class="comment">//=&gt; &#123; name: "Alice", job: "student", age: 16 &#125;</span></span><br></pre></td></tr></table></figure><p>但既然是 <code>options</code> 設計上應該就是可以完全不傳值，只將必須的參數傳入，函式內部會將 <code>options</code> 套用預設值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 傳統參數預設值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toPersonV3</span>(<span class="params">name, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> DEFAULT = &#123; <span class="attr">job</span>: <span class="string">'student'</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> job = options.job || DEFAULT.job;</span><br><span class="line">    <span class="keyword">const</span> age = options.age || DEFAULT.age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或使用 Object.assign</span></span><br><span class="line">    <span class="comment">// const opt = Object.assign(DEFAULT, options);</span></span><br><span class="line">    <span class="comment">// const job = opt.job;</span></span><br><span class="line">    <span class="comment">// const age = opt.age;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        job,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">toPersonV3(<span class="string">'Alice'</span>); <span class="comment">//=&gt; &#123; name: "Alice", job: "student", age: 16 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 參數賦值解構 + 預設值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toPersonV4</span>(<span class="params">name, &#123; job, age &#125; = &#123; job: <span class="string">'student'</span>, age: <span class="number">16</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        job,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">toPersonV4(<span class="string">'Alice'</span>); <span class="comment">//=&gt; &#123; name: "Alice", job: "student", age: 16 &#125;</span></span><br></pre></td></tr></table></figure><h2><span id="wen-ti">問題</span></h2><p>在 <code>toPersonV4()</code> 的 <code>options</code> 我們給完整的 <code>options</code> 或完全不給都不會出錯，但在給不完整的 <code>options</code> 時，會有很麻煩的情形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toPersonV4(<span class="string">'Alice'</span>, &#123; <span class="attr">age</span>: <span class="number">16</span> &#125;); <span class="comment">//=&gt; &#123; name: "Alice", job: undefined, age: 16 &#125;</span></span><br></pre></td></tr></table></figure><p>上述範例可以看到，即使有預設值，他並不會做類似 <code>Object.assign</code> 的行為，所以到函式內還是要檢查一次，非常多此一舉……</p><h2><span id="jie-lun">結論</span></h2><p>其實參數的賦值解構非常強大，在大部分時候可以在宣告時就知道傳入的應該要有哪些鍵值，只放一個像是 <code>options</code> 的變數名還要往回找傳入的 <code>Object</code> 鍵值才能取值。但若有預設值而且要解構的變數非常多，不僅會讓函式宣告變得非常冗長，函式內部一樣要檢查，這時選擇傳統的寫法反而方便點。</p><hr><p>2018.03.27 更新：<br>看到<a href="https://www.codementor.io/billsourour897/elegant-patterns-in-modern-javascript-roro-hn217atuu" target="_blank" rel="noopener">一篇文章</a>也在講類似的事，其中也有提到預設值的設定。原來預設值是要放到前面的用 <code>=</code> 來設定而不是後面的，如下例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toPersonV4</span>(<span class="params">name, &#123; job = <span class="string">'student'</span>, age = <span class="number">16</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//                          ^~~~ 注意是 `=` 不是 `:`</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        job,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toPersonV4(<span class="string">'Alice'</span>); <span class="comment">//=&gt; &#123; name: "Alice", job: "student", age: 16 &#125;</span></span><br><span class="line">toPersonV4(<span class="string">'Alice'</span>, &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;); <span class="comment">//=&gt; &#123; name: "Alice", job: "student", age: 18 &#125;</span></span><br></pre></td></tr></table></figure><p>可惡，覺得被打臉了 😂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;qian-yan&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;ES6 可以在函式宣告時將 &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt; 型態的參數可以直接解構成區域變數，下面舉個例子：&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="es6" scheme="https://flandredaisuki.github.io/blog/tags/es6/"/>
    
      <category term="JavaScript" scheme="https://flandredaisuki.github.io/blog/tags/JavaScript/"/>
    
      <category term="奇技淫巧" scheme="https://flandredaisuki.github.io/blog/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://flandredaisuki.github.io/blog/2018/03/13/Hello-World/"/>
    <id>https://flandredaisuki.github.io/blog/2018/03/13/Hello-World/</id>
    <published>2018-03-13T14:43:58.000Z</published>
    <updated>2018-03-13T16:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>來玩玩看 Hexo, 順便幫自己的學習作個筆記。</p><p>沒想到一開始就踩到雷，不過這個雷應該算是 GitHub 的。</p><p>原本是想在 <code>FlandreDaisuki.github.io/blog</code> 下放所有 Hexo 的東西，但不管在 <code>FlandreDaisuki.github.io</code> 這個 repo 下怎麼設定都出不來，搜尋一下發現了這個 issue (<a href="https://github.com/hexojs/hexo/issues/1081" target="_blank" rel="noopener">hexo#1081</a>)</p><p>簡單來說 GitHub Pages 的 subdirectory 分成兩種：</p><ol><li><code>{user}/{repo}</code> 下的 <code>gh-pages</code> 分支或是 <code>master</code> 分支下的 <code>docs</code> 資料夾作為 subdirectory 的根目錄 <a href="https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/" target="_blank" rel="noopener">*1</a></li><li><code>{user}.github.io</code> 這個特殊名字的 repo 下的 subdirectory</li></ol><p>如果是用第一點的情況，只要創個 <code>blog</code> 的 repo 然後讓 Hexo 部署到 <code>gh-pages</code> 分支下即可。</p><p>第二點則是將 <code>$ hexo generate</code> 出來的靜態網站丟到 <code>{user}.github.io</code> 下的 <code>blog</code> 資料夾。</p><p>因為第一點可以調整 <code>_config.yml</code> 用 <code>hexo-cli</code> 來做，且有<a href="https://hexo.io/zh-tw/docs/deployment.html#Git" target="_blank" rel="noopener">現成的方案</a>，所以最後使用第一點的解法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;來玩玩看 Hexo, 順便幫自己的學習作個筆記。&lt;/p&gt;
&lt;p&gt;沒想到一開始就踩到雷，不過這個雷應該算是 GitHub 的。&lt;/p&gt;
&lt;p&gt;原本是想在 &lt;code&gt;FlandreDaisuki.github.io/blog&lt;/code&gt; 下放所有 Hexo 的東西，但不管在
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://flandredaisuki.github.io/blog/tags/hexo/"/>
    
      <category term="gh-pages" scheme="https://flandredaisuki.github.io/blog/tags/gh-pages/"/>
    
  </entry>
  
</feed>
